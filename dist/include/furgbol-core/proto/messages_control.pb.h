// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fcontrol_2eproto;
class ControlPackage;
class ControlPackageDefaultTypeInternal;
extern ControlPackageDefaultTypeInternal _ControlPackage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ControlPackage* Arena::CreateMaybeMessage<::ControlPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ControlPackage_FieldSide : int {
  ControlPackage_FieldSide_Left = 0,
  ControlPackage_FieldSide_Right = 1
};
bool ControlPackage_FieldSide_IsValid(int value);
constexpr ControlPackage_FieldSide ControlPackage_FieldSide_FieldSide_MIN = ControlPackage_FieldSide_Left;
constexpr ControlPackage_FieldSide ControlPackage_FieldSide_FieldSide_MAX = ControlPackage_FieldSide_Right;
constexpr int ControlPackage_FieldSide_FieldSide_ARRAYSIZE = ControlPackage_FieldSide_FieldSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlPackage_FieldSide_descriptor();
template<typename T>
inline const std::string& ControlPackage_FieldSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlPackage_FieldSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlPackage_FieldSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlPackage_FieldSide_descriptor(), enum_t_value);
}
inline bool ControlPackage_FieldSide_Parse(
    const std::string& name, ControlPackage_FieldSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlPackage_FieldSide>(
    ControlPackage_FieldSide_descriptor(), name, value);
}
enum ControlPackage_TeamColor : int {
  ControlPackage_TeamColor_Yellow = 0,
  ControlPackage_TeamColor_Blue = 1
};
bool ControlPackage_TeamColor_IsValid(int value);
constexpr ControlPackage_TeamColor ControlPackage_TeamColor_TeamColor_MIN = ControlPackage_TeamColor_Yellow;
constexpr ControlPackage_TeamColor ControlPackage_TeamColor_TeamColor_MAX = ControlPackage_TeamColor_Blue;
constexpr int ControlPackage_TeamColor_TeamColor_ARRAYSIZE = ControlPackage_TeamColor_TeamColor_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlPackage_TeamColor_descriptor();
template<typename T>
inline const std::string& ControlPackage_TeamColor_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlPackage_TeamColor>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlPackage_TeamColor_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlPackage_TeamColor_descriptor(), enum_t_value);
}
inline bool ControlPackage_TeamColor_Parse(
    const std::string& name, ControlPackage_TeamColor* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlPackage_TeamColor>(
    ControlPackage_TeamColor_descriptor(), name, value);
}
// ===================================================================

class ControlPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ControlPackage) */ {
 public:
  ControlPackage();
  virtual ~ControlPackage();

  ControlPackage(const ControlPackage& from);
  ControlPackage(ControlPackage&& from) noexcept
    : ControlPackage() {
    *this = ::std::move(from);
  }

  inline ControlPackage& operator=(const ControlPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlPackage& operator=(ControlPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlPackage* internal_default_instance() {
    return reinterpret_cast<const ControlPackage*>(
               &_ControlPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlPackage& a, ControlPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlPackage* New() const final {
    return CreateMaybeMessage<ControlPackage>(nullptr);
  }

  ControlPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlPackage& from);
  void MergeFrom(const ControlPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ControlPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fcontrol_2eproto);
    return ::descriptor_table_messages_5fcontrol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ControlPackage_FieldSide FieldSide;
  static constexpr FieldSide Left =
    ControlPackage_FieldSide_Left;
  static constexpr FieldSide Right =
    ControlPackage_FieldSide_Right;
  static inline bool FieldSide_IsValid(int value) {
    return ControlPackage_FieldSide_IsValid(value);
  }
  static constexpr FieldSide FieldSide_MIN =
    ControlPackage_FieldSide_FieldSide_MIN;
  static constexpr FieldSide FieldSide_MAX =
    ControlPackage_FieldSide_FieldSide_MAX;
  static constexpr int FieldSide_ARRAYSIZE =
    ControlPackage_FieldSide_FieldSide_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FieldSide_descriptor() {
    return ControlPackage_FieldSide_descriptor();
  }
  template<typename T>
  static inline const std::string& FieldSide_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FieldSide>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FieldSide_Name.");
    return ControlPackage_FieldSide_Name(enum_t_value);
  }
  static inline bool FieldSide_Parse(const std::string& name,
      FieldSide* value) {
    return ControlPackage_FieldSide_Parse(name, value);
  }

  typedef ControlPackage_TeamColor TeamColor;
  static constexpr TeamColor Yellow =
    ControlPackage_TeamColor_Yellow;
  static constexpr TeamColor Blue =
    ControlPackage_TeamColor_Blue;
  static inline bool TeamColor_IsValid(int value) {
    return ControlPackage_TeamColor_IsValid(value);
  }
  static constexpr TeamColor TeamColor_MIN =
    ControlPackage_TeamColor_TeamColor_MIN;
  static constexpr TeamColor TeamColor_MAX =
    ControlPackage_TeamColor_TeamColor_MAX;
  static constexpr int TeamColor_ARRAYSIZE =
    ControlPackage_TeamColor_TeamColor_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TeamColor_descriptor() {
    return ControlPackage_TeamColor_descriptor();
  }
  template<typename T>
  static inline const std::string& TeamColor_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TeamColor>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TeamColor_Name.");
    return ControlPackage_TeamColor_Name(enum_t_value);
  }
  static inline bool TeamColor_Parse(const std::string& name,
      TeamColor* value) {
    return ControlPackage_TeamColor_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFieldSideFieldNumber = 1,
    kTeamColorFieldNumber = 2,
    kIdGKFieldNumber = 3,
  };
  // required .ControlPackage.FieldSide field_side = 1;
  bool has_field_side() const;
  private:
  bool _internal_has_field_side() const;
  public:
  void clear_field_side();
  ::ControlPackage_FieldSide field_side() const;
  void set_field_side(::ControlPackage_FieldSide value);
  private:
  ::ControlPackage_FieldSide _internal_field_side() const;
  void _internal_set_field_side(::ControlPackage_FieldSide value);
  public:

  // required .ControlPackage.TeamColor team_color = 2;
  bool has_team_color() const;
  private:
  bool _internal_has_team_color() const;
  public:
  void clear_team_color();
  ::ControlPackage_TeamColor team_color() const;
  void set_team_color(::ControlPackage_TeamColor value);
  private:
  ::ControlPackage_TeamColor _internal_team_color() const;
  void _internal_set_team_color(::ControlPackage_TeamColor value);
  public:

  // required int32 id_GK = 3;
  bool has_id_gk() const;
  private:
  bool _internal_has_id_gk() const;
  public:
  void clear_id_gk();
  ::PROTOBUF_NAMESPACE_ID::int32 id_gk() const;
  void set_id_gk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id_gk() const;
  void _internal_set_id_gk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ControlPackage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int field_side_;
  int team_color_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_gk_;
  friend struct ::TableStruct_messages_5fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlPackage

// required .ControlPackage.FieldSide field_side = 1;
inline bool ControlPackage::_internal_has_field_side() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ControlPackage::has_field_side() const {
  return _internal_has_field_side();
}
inline void ControlPackage::clear_field_side() {
  field_side_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ControlPackage_FieldSide ControlPackage::_internal_field_side() const {
  return static_cast< ::ControlPackage_FieldSide >(field_side_);
}
inline ::ControlPackage_FieldSide ControlPackage::field_side() const {
  // @@protoc_insertion_point(field_get:ControlPackage.field_side)
  return _internal_field_side();
}
inline void ControlPackage::_internal_set_field_side(::ControlPackage_FieldSide value) {
  assert(::ControlPackage_FieldSide_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  field_side_ = value;
}
inline void ControlPackage::set_field_side(::ControlPackage_FieldSide value) {
  _internal_set_field_side(value);
  // @@protoc_insertion_point(field_set:ControlPackage.field_side)
}

// required .ControlPackage.TeamColor team_color = 2;
inline bool ControlPackage::_internal_has_team_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ControlPackage::has_team_color() const {
  return _internal_has_team_color();
}
inline void ControlPackage::clear_team_color() {
  team_color_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ControlPackage_TeamColor ControlPackage::_internal_team_color() const {
  return static_cast< ::ControlPackage_TeamColor >(team_color_);
}
inline ::ControlPackage_TeamColor ControlPackage::team_color() const {
  // @@protoc_insertion_point(field_get:ControlPackage.team_color)
  return _internal_team_color();
}
inline void ControlPackage::_internal_set_team_color(::ControlPackage_TeamColor value) {
  assert(::ControlPackage_TeamColor_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  team_color_ = value;
}
inline void ControlPackage::set_team_color(::ControlPackage_TeamColor value) {
  _internal_set_team_color(value);
  // @@protoc_insertion_point(field_set:ControlPackage.team_color)
}

// required int32 id_GK = 3;
inline bool ControlPackage::_internal_has_id_gk() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ControlPackage::has_id_gk() const {
  return _internal_has_id_gk();
}
inline void ControlPackage::clear_id_gk() {
  id_gk_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlPackage::_internal_id_gk() const {
  return id_gk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlPackage::id_gk() const {
  // @@protoc_insertion_point(field_get:ControlPackage.id_GK)
  return _internal_id_gk();
}
inline void ControlPackage::_internal_set_id_gk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_gk_ = value;
}
inline void ControlPackage::set_id_gk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id_gk(value);
  // @@protoc_insertion_point(field_set:ControlPackage.id_GK)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ControlPackage_FieldSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlPackage_FieldSide>() {
  return ::ControlPackage_FieldSide_descriptor();
}
template <> struct is_proto_enum< ::ControlPackage_TeamColor> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ControlPackage_TeamColor>() {
  return ::ControlPackage_TeamColor_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5fcontrol_2eproto
