// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_data_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5fdata_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5fdata_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "referee.pb.h"
#include "messages_vision_manager.pb.h"
#include "messages_control.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5fdata_5fmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5fdata_5fmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fdata_5fmanager_2eproto;
class DataPackage;
class DataPackageDefaultTypeInternal;
extern DataPackageDefaultTypeInternal _DataPackage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DataPackage* Arena::CreateMaybeMessage<::DataPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class DataPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataPackage) */ {
 public:
  DataPackage();
  virtual ~DataPackage();

  DataPackage(const DataPackage& from);
  DataPackage(DataPackage&& from) noexcept
    : DataPackage() {
    *this = ::std::move(from);
  }

  inline DataPackage& operator=(const DataPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPackage& operator=(DataPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataPackage* internal_default_instance() {
    return reinterpret_cast<const DataPackage*>(
               &_DataPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataPackage& a, DataPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataPackage* New() const final {
    return CreateMaybeMessage<DataPackage>(nullptr);
  }

  DataPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataPackage& from);
  void MergeFrom(const DataPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fdata_5fmanager_2eproto);
    return ::descriptor_table_messages_5fdata_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisionFieldNumber = 1,
    kRefereeFieldNumber = 2,
    kControlFieldNumber = 3,
  };
  // required .VisionPackage vision = 1;
  bool has_vision() const;
  private:
  bool _internal_has_vision() const;
  public:
  void clear_vision();
  const ::VisionPackage& vision() const;
  ::VisionPackage* release_vision();
  ::VisionPackage* mutable_vision();
  void set_allocated_vision(::VisionPackage* vision);
  private:
  const ::VisionPackage& _internal_vision() const;
  ::VisionPackage* _internal_mutable_vision();
  public:

  // optional .SSL_Referee referee = 2;
  bool has_referee() const;
  private:
  bool _internal_has_referee() const;
  public:
  void clear_referee();
  const ::SSL_Referee& referee() const;
  ::SSL_Referee* release_referee();
  ::SSL_Referee* mutable_referee();
  void set_allocated_referee(::SSL_Referee* referee);
  private:
  const ::SSL_Referee& _internal_referee() const;
  ::SSL_Referee* _internal_mutable_referee();
  public:

  // optional .ControlPackage control = 3;
  bool has_control() const;
  private:
  bool _internal_has_control() const;
  public:
  void clear_control();
  const ::ControlPackage& control() const;
  ::ControlPackage* release_control();
  ::ControlPackage* mutable_control();
  void set_allocated_control(::ControlPackage* control);
  private:
  const ::ControlPackage& _internal_control() const;
  ::ControlPackage* _internal_mutable_control();
  public:

  // @@protoc_insertion_point(class_scope:DataPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::VisionPackage* vision_;
  ::SSL_Referee* referee_;
  ::ControlPackage* control_;
  friend struct ::TableStruct_messages_5fdata_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataPackage

// required .VisionPackage vision = 1;
inline bool DataPackage::_internal_has_vision() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vision_ != nullptr);
  return value;
}
inline bool DataPackage::has_vision() const {
  return _internal_has_vision();
}
inline const ::VisionPackage& DataPackage::_internal_vision() const {
  const ::VisionPackage* p = vision_;
  return p != nullptr ? *p : *reinterpret_cast<const ::VisionPackage*>(
      &::_VisionPackage_default_instance_);
}
inline const ::VisionPackage& DataPackage::vision() const {
  // @@protoc_insertion_point(field_get:DataPackage.vision)
  return _internal_vision();
}
inline ::VisionPackage* DataPackage::release_vision() {
  // @@protoc_insertion_point(field_release:DataPackage.vision)
  _has_bits_[0] &= ~0x00000001u;
  ::VisionPackage* temp = vision_;
  vision_ = nullptr;
  return temp;
}
inline ::VisionPackage* DataPackage::_internal_mutable_vision() {
  _has_bits_[0] |= 0x00000001u;
  if (vision_ == nullptr) {
    auto* p = CreateMaybeMessage<::VisionPackage>(GetArenaNoVirtual());
    vision_ = p;
  }
  return vision_;
}
inline ::VisionPackage* DataPackage::mutable_vision() {
  // @@protoc_insertion_point(field_mutable:DataPackage.vision)
  return _internal_mutable_vision();
}
inline void DataPackage::set_allocated_vision(::VisionPackage* vision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vision_);
  }
  if (vision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vision, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vision_ = vision;
  // @@protoc_insertion_point(field_set_allocated:DataPackage.vision)
}

// optional .SSL_Referee referee = 2;
inline bool DataPackage::_internal_has_referee() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || referee_ != nullptr);
  return value;
}
inline bool DataPackage::has_referee() const {
  return _internal_has_referee();
}
inline const ::SSL_Referee& DataPackage::_internal_referee() const {
  const ::SSL_Referee* p = referee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SSL_Referee*>(
      &::_SSL_Referee_default_instance_);
}
inline const ::SSL_Referee& DataPackage::referee() const {
  // @@protoc_insertion_point(field_get:DataPackage.referee)
  return _internal_referee();
}
inline ::SSL_Referee* DataPackage::release_referee() {
  // @@protoc_insertion_point(field_release:DataPackage.referee)
  _has_bits_[0] &= ~0x00000002u;
  ::SSL_Referee* temp = referee_;
  referee_ = nullptr;
  return temp;
}
inline ::SSL_Referee* DataPackage::_internal_mutable_referee() {
  _has_bits_[0] |= 0x00000002u;
  if (referee_ == nullptr) {
    auto* p = CreateMaybeMessage<::SSL_Referee>(GetArenaNoVirtual());
    referee_ = p;
  }
  return referee_;
}
inline ::SSL_Referee* DataPackage::mutable_referee() {
  // @@protoc_insertion_point(field_mutable:DataPackage.referee)
  return _internal_mutable_referee();
}
inline void DataPackage::set_allocated_referee(::SSL_Referee* referee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(referee_);
  }
  if (referee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      referee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, referee, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  referee_ = referee;
  // @@protoc_insertion_point(field_set_allocated:DataPackage.referee)
}

// optional .ControlPackage control = 3;
inline bool DataPackage::_internal_has_control() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || control_ != nullptr);
  return value;
}
inline bool DataPackage::has_control() const {
  return _internal_has_control();
}
inline const ::ControlPackage& DataPackage::_internal_control() const {
  const ::ControlPackage* p = control_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ControlPackage*>(
      &::_ControlPackage_default_instance_);
}
inline const ::ControlPackage& DataPackage::control() const {
  // @@protoc_insertion_point(field_get:DataPackage.control)
  return _internal_control();
}
inline ::ControlPackage* DataPackage::release_control() {
  // @@protoc_insertion_point(field_release:DataPackage.control)
  _has_bits_[0] &= ~0x00000004u;
  ::ControlPackage* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::ControlPackage* DataPackage::_internal_mutable_control() {
  _has_bits_[0] |= 0x00000004u;
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::ControlPackage>(GetArenaNoVirtual());
    control_ = p;
  }
  return control_;
}
inline ::ControlPackage* DataPackage::mutable_control() {
  // @@protoc_insertion_point(field_mutable:DataPackage.control)
  return _internal_mutable_control();
}
inline void DataPackage::set_allocated_control(::ControlPackage* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_);
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:DataPackage.control)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5fdata_5fmanager_2eproto
