// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ai_variables.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ai_5fvariables_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ai_5fvariables_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ai_5fvariables_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ai_5fvariables_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ai_5fvariables_2eproto;
class AIVariablesPackage;
class AIVariablesPackageDefaultTypeInternal;
extern AIVariablesPackageDefaultTypeInternal _AIVariablesPackage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AIVariablesPackage* Arena::CreateMaybeMessage<::AIVariablesPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class AIVariablesPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AIVariablesPackage) */ {
 public:
  AIVariablesPackage();
  virtual ~AIVariablesPackage();

  AIVariablesPackage(const AIVariablesPackage& from);
  AIVariablesPackage(AIVariablesPackage&& from) noexcept
    : AIVariablesPackage() {
    *this = ::std::move(from);
  }

  inline AIVariablesPackage& operator=(const AIVariablesPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIVariablesPackage& operator=(AIVariablesPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIVariablesPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIVariablesPackage* internal_default_instance() {
    return reinterpret_cast<const AIVariablesPackage*>(
               &_AIVariablesPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AIVariablesPackage& a, AIVariablesPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(AIVariablesPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIVariablesPackage* New() const final {
    return CreateMaybeMessage<AIVariablesPackage>(nullptr);
  }

  AIVariablesPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIVariablesPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIVariablesPackage& from);
  void MergeFrom(const AIVariablesPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIVariablesPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AIVariablesPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ai_5fvariables_2eproto);
    return ::descriptor_table_ai_5fvariables_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComponentFieldNumber = 1,
    kComponentNameFieldNumber = 2,
    kComponentValueFieldNumber = 3,
  };
  // repeated string component = 1;
  int component_size() const;
  private:
  int _internal_component_size() const;
  public:
  void clear_component();
  const std::string& component(int index) const;
  std::string* mutable_component(int index);
  void set_component(int index, const std::string& value);
  void set_component(int index, std::string&& value);
  void set_component(int index, const char* value);
  void set_component(int index, const char* value, size_t size);
  std::string* add_component();
  void add_component(const std::string& value);
  void add_component(std::string&& value);
  void add_component(const char* value);
  void add_component(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& component() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_component();
  private:
  const std::string& _internal_component(int index) const;
  std::string* _internal_add_component();
  public:

  // repeated string component_name = 2;
  int component_name_size() const;
  private:
  int _internal_component_name_size() const;
  public:
  void clear_component_name();
  const std::string& component_name(int index) const;
  std::string* mutable_component_name(int index);
  void set_component_name(int index, const std::string& value);
  void set_component_name(int index, std::string&& value);
  void set_component_name(int index, const char* value);
  void set_component_name(int index, const char* value, size_t size);
  std::string* add_component_name();
  void add_component_name(const std::string& value);
  void add_component_name(std::string&& value);
  void add_component_name(const char* value);
  void add_component_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& component_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_component_name();
  private:
  const std::string& _internal_component_name(int index) const;
  std::string* _internal_add_component_name();
  public:

  // repeated string component_value = 3;
  int component_value_size() const;
  private:
  int _internal_component_value_size() const;
  public:
  void clear_component_value();
  const std::string& component_value(int index) const;
  std::string* mutable_component_value(int index);
  void set_component_value(int index, const std::string& value);
  void set_component_value(int index, std::string&& value);
  void set_component_value(int index, const char* value);
  void set_component_value(int index, const char* value, size_t size);
  std::string* add_component_value();
  void add_component_value(const std::string& value);
  void add_component_value(std::string&& value);
  void add_component_value(const char* value);
  void add_component_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& component_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_component_value();
  private:
  const std::string& _internal_component_value(int index) const;
  std::string* _internal_add_component_value();
  public:

  // @@protoc_insertion_point(class_scope:AIVariablesPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> component_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> component_name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> component_value_;
  friend struct ::TableStruct_ai_5fvariables_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AIVariablesPackage

// repeated string component = 1;
inline int AIVariablesPackage::_internal_component_size() const {
  return component_.size();
}
inline int AIVariablesPackage::component_size() const {
  return _internal_component_size();
}
inline void AIVariablesPackage::clear_component() {
  component_.Clear();
}
inline std::string* AIVariablesPackage::add_component() {
  // @@protoc_insertion_point(field_add_mutable:AIVariablesPackage.component)
  return _internal_add_component();
}
inline const std::string& AIVariablesPackage::_internal_component(int index) const {
  return component_.Get(index);
}
inline const std::string& AIVariablesPackage::component(int index) const {
  // @@protoc_insertion_point(field_get:AIVariablesPackage.component)
  return _internal_component(index);
}
inline std::string* AIVariablesPackage::mutable_component(int index) {
  // @@protoc_insertion_point(field_mutable:AIVariablesPackage.component)
  return component_.Mutable(index);
}
inline void AIVariablesPackage::set_component(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AIVariablesPackage.component)
  component_.Mutable(index)->assign(value);
}
inline void AIVariablesPackage::set_component(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AIVariablesPackage.component)
  component_.Mutable(index)->assign(std::move(value));
}
inline void AIVariablesPackage::set_component(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  component_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIVariablesPackage.component)
}
inline void AIVariablesPackage::set_component(int index, const char* value, size_t size) {
  component_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIVariablesPackage.component)
}
inline std::string* AIVariablesPackage::_internal_add_component() {
  return component_.Add();
}
inline void AIVariablesPackage::add_component(const std::string& value) {
  component_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIVariablesPackage.component)
}
inline void AIVariablesPackage::add_component(std::string&& value) {
  component_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AIVariablesPackage.component)
}
inline void AIVariablesPackage::add_component(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  component_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIVariablesPackage.component)
}
inline void AIVariablesPackage::add_component(const char* value, size_t size) {
  component_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIVariablesPackage.component)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AIVariablesPackage::component() const {
  // @@protoc_insertion_point(field_list:AIVariablesPackage.component)
  return component_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AIVariablesPackage::mutable_component() {
  // @@protoc_insertion_point(field_mutable_list:AIVariablesPackage.component)
  return &component_;
}

// repeated string component_name = 2;
inline int AIVariablesPackage::_internal_component_name_size() const {
  return component_name_.size();
}
inline int AIVariablesPackage::component_name_size() const {
  return _internal_component_name_size();
}
inline void AIVariablesPackage::clear_component_name() {
  component_name_.Clear();
}
inline std::string* AIVariablesPackage::add_component_name() {
  // @@protoc_insertion_point(field_add_mutable:AIVariablesPackage.component_name)
  return _internal_add_component_name();
}
inline const std::string& AIVariablesPackage::_internal_component_name(int index) const {
  return component_name_.Get(index);
}
inline const std::string& AIVariablesPackage::component_name(int index) const {
  // @@protoc_insertion_point(field_get:AIVariablesPackage.component_name)
  return _internal_component_name(index);
}
inline std::string* AIVariablesPackage::mutable_component_name(int index) {
  // @@protoc_insertion_point(field_mutable:AIVariablesPackage.component_name)
  return component_name_.Mutable(index);
}
inline void AIVariablesPackage::set_component_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AIVariablesPackage.component_name)
  component_name_.Mutable(index)->assign(value);
}
inline void AIVariablesPackage::set_component_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AIVariablesPackage.component_name)
  component_name_.Mutable(index)->assign(std::move(value));
}
inline void AIVariablesPackage::set_component_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  component_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIVariablesPackage.component_name)
}
inline void AIVariablesPackage::set_component_name(int index, const char* value, size_t size) {
  component_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIVariablesPackage.component_name)
}
inline std::string* AIVariablesPackage::_internal_add_component_name() {
  return component_name_.Add();
}
inline void AIVariablesPackage::add_component_name(const std::string& value) {
  component_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIVariablesPackage.component_name)
}
inline void AIVariablesPackage::add_component_name(std::string&& value) {
  component_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AIVariablesPackage.component_name)
}
inline void AIVariablesPackage::add_component_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  component_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIVariablesPackage.component_name)
}
inline void AIVariablesPackage::add_component_name(const char* value, size_t size) {
  component_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIVariablesPackage.component_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AIVariablesPackage::component_name() const {
  // @@protoc_insertion_point(field_list:AIVariablesPackage.component_name)
  return component_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AIVariablesPackage::mutable_component_name() {
  // @@protoc_insertion_point(field_mutable_list:AIVariablesPackage.component_name)
  return &component_name_;
}

// repeated string component_value = 3;
inline int AIVariablesPackage::_internal_component_value_size() const {
  return component_value_.size();
}
inline int AIVariablesPackage::component_value_size() const {
  return _internal_component_value_size();
}
inline void AIVariablesPackage::clear_component_value() {
  component_value_.Clear();
}
inline std::string* AIVariablesPackage::add_component_value() {
  // @@protoc_insertion_point(field_add_mutable:AIVariablesPackage.component_value)
  return _internal_add_component_value();
}
inline const std::string& AIVariablesPackage::_internal_component_value(int index) const {
  return component_value_.Get(index);
}
inline const std::string& AIVariablesPackage::component_value(int index) const {
  // @@protoc_insertion_point(field_get:AIVariablesPackage.component_value)
  return _internal_component_value(index);
}
inline std::string* AIVariablesPackage::mutable_component_value(int index) {
  // @@protoc_insertion_point(field_mutable:AIVariablesPackage.component_value)
  return component_value_.Mutable(index);
}
inline void AIVariablesPackage::set_component_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AIVariablesPackage.component_value)
  component_value_.Mutable(index)->assign(value);
}
inline void AIVariablesPackage::set_component_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AIVariablesPackage.component_value)
  component_value_.Mutable(index)->assign(std::move(value));
}
inline void AIVariablesPackage::set_component_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  component_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIVariablesPackage.component_value)
}
inline void AIVariablesPackage::set_component_value(int index, const char* value, size_t size) {
  component_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIVariablesPackage.component_value)
}
inline std::string* AIVariablesPackage::_internal_add_component_value() {
  return component_value_.Add();
}
inline void AIVariablesPackage::add_component_value(const std::string& value) {
  component_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIVariablesPackage.component_value)
}
inline void AIVariablesPackage::add_component_value(std::string&& value) {
  component_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AIVariablesPackage.component_value)
}
inline void AIVariablesPackage::add_component_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  component_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIVariablesPackage.component_value)
}
inline void AIVariablesPackage::add_component_value(const char* value, size_t size) {
  component_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIVariablesPackage.component_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AIVariablesPackage::component_value() const {
  // @@protoc_insertion_point(field_list:AIVariablesPackage.component_value)
  return component_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AIVariablesPackage::mutable_component_value() {
  // @@protoc_insertion_point(field_mutable_list:AIVariablesPackage.component_value)
  return &component_value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ai_5fvariables_2eproto
