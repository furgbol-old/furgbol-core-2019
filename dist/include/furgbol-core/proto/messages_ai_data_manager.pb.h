// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_ai_data_manager.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5fai_5fdata_5fmanager_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5fai_5fdata_5fmanager_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5fai_5fdata_5fmanager_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5fai_5fdata_5fmanager_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fai_5fdata_5fmanager_2eproto;
class AIDataManagerPackage;
class AIDataManagerPackageDefaultTypeInternal;
extern AIDataManagerPackageDefaultTypeInternal _AIDataManagerPackage_default_instance_;
class AIRobotPackage;
class AIRobotPackageDefaultTypeInternal;
extern AIRobotPackageDefaultTypeInternal _AIRobotPackage_default_instance_;
class PathPlanningPackage;
class PathPlanningPackageDefaultTypeInternal;
extern PathPlanningPackageDefaultTypeInternal _PathPlanningPackage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AIDataManagerPackage* Arena::CreateMaybeMessage<::AIDataManagerPackage>(Arena*);
template<> ::AIRobotPackage* Arena::CreateMaybeMessage<::AIRobotPackage>(Arena*);
template<> ::PathPlanningPackage* Arena::CreateMaybeMessage<::PathPlanningPackage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class PathPlanningPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PathPlanningPackage) */ {
 public:
  PathPlanningPackage();
  virtual ~PathPlanningPackage();

  PathPlanningPackage(const PathPlanningPackage& from);
  PathPlanningPackage(PathPlanningPackage&& from) noexcept
    : PathPlanningPackage() {
    *this = ::std::move(from);
  }

  inline PathPlanningPackage& operator=(const PathPlanningPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathPlanningPackage& operator=(PathPlanningPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathPlanningPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathPlanningPackage* internal_default_instance() {
    return reinterpret_cast<const PathPlanningPackage*>(
               &_PathPlanningPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PathPlanningPackage& a, PathPlanningPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(PathPlanningPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathPlanningPackage* New() const final {
    return CreateMaybeMessage<PathPlanningPackage>(nullptr);
  }

  PathPlanningPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathPlanningPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathPlanningPackage& from);
  void MergeFrom(const PathPlanningPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathPlanningPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PathPlanningPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fai_5fdata_5fmanager_2eproto);
    return ::descriptor_table_messages_5fai_5fdata_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // repeated float x = 1;
  int x_size() const;
  private:
  int _internal_x_size() const;
  public:
  void clear_x();
  private:
  float _internal_x(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_x() const;
  void _internal_add_x(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_x();
  public:
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      x() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_x();

  // repeated float y = 2;
  int y_size() const;
  private:
  int _internal_y_size() const;
  public:
  void clear_y();
  private:
  float _internal_y(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_y() const;
  void _internal_add_y(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_y();
  public:
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      y() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_y();

  // @@protoc_insertion_point(class_scope:PathPlanningPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > x_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > y_;
  friend struct ::TableStruct_messages_5fai_5fdata_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class AIRobotPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AIRobotPackage) */ {
 public:
  AIRobotPackage();
  virtual ~AIRobotPackage();

  AIRobotPackage(const AIRobotPackage& from);
  AIRobotPackage(AIRobotPackage&& from) noexcept
    : AIRobotPackage() {
    *this = ::std::move(from);
  }

  inline AIRobotPackage& operator=(const AIRobotPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIRobotPackage& operator=(AIRobotPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIRobotPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIRobotPackage* internal_default_instance() {
    return reinterpret_cast<const AIRobotPackage*>(
               &_AIRobotPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AIRobotPackage& a, AIRobotPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(AIRobotPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIRobotPackage* New() const final {
    return CreateMaybeMessage<AIRobotPackage>(nullptr);
  }

  AIRobotPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIRobotPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIRobotPackage& from);
  void MergeFrom(const AIRobotPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIRobotPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AIRobotPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fai_5fdata_5fmanager_2eproto);
    return ::descriptor_table_messages_5fai_5fdata_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorialInformationFieldNumber = 7,
    kSkillFieldNumber = 5,
    kTacticFieldNumber = 6,
    kPathPlanningFieldNumber = 10,
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kOrientationFieldNumber = 4,
    kTargetXFieldNumber = 8,
    kTargetYFieldNumber = 9,
    kVelocityXFieldNumber = 11,
    kVelocityYFieldNumber = 12,
    kVelocityThetaFieldNumber = 13,
    kLowKickFieldNumber = 14,
    kHighKickFieldNumber = 15,
    kDribblerFieldNumber = 16,
  };
  // repeated string sensorialInformation = 7;
  int sensorialinformation_size() const;
  private:
  int _internal_sensorialinformation_size() const;
  public:
  void clear_sensorialinformation();
  const std::string& sensorialinformation(int index) const;
  std::string* mutable_sensorialinformation(int index);
  void set_sensorialinformation(int index, const std::string& value);
  void set_sensorialinformation(int index, std::string&& value);
  void set_sensorialinformation(int index, const char* value);
  void set_sensorialinformation(int index, const char* value, size_t size);
  std::string* add_sensorialinformation();
  void add_sensorialinformation(const std::string& value);
  void add_sensorialinformation(std::string&& value);
  void add_sensorialinformation(const char* value);
  void add_sensorialinformation(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sensorialinformation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sensorialinformation();
  private:
  const std::string& _internal_sensorialinformation(int index) const;
  std::string* _internal_add_sensorialinformation();
  public:

  // optional string skill = 5;
  bool has_skill() const;
  private:
  bool _internal_has_skill() const;
  public:
  void clear_skill();
  const std::string& skill() const;
  void set_skill(const std::string& value);
  void set_skill(std::string&& value);
  void set_skill(const char* value);
  void set_skill(const char* value, size_t size);
  std::string* mutable_skill();
  std::string* release_skill();
  void set_allocated_skill(std::string* skill);
  private:
  const std::string& _internal_skill() const;
  void _internal_set_skill(const std::string& value);
  std::string* _internal_mutable_skill();
  public:

  // optional string tactic = 6;
  bool has_tactic() const;
  private:
  bool _internal_has_tactic() const;
  public:
  void clear_tactic();
  const std::string& tactic() const;
  void set_tactic(const std::string& value);
  void set_tactic(std::string&& value);
  void set_tactic(const char* value);
  void set_tactic(const char* value, size_t size);
  std::string* mutable_tactic();
  std::string* release_tactic();
  void set_allocated_tactic(std::string* tactic);
  private:
  const std::string& _internal_tactic() const;
  void _internal_set_tactic(const std::string& value);
  std::string* _internal_mutable_tactic();
  public:

  // optional .PathPlanningPackage path_planning = 10;
  bool has_path_planning() const;
  private:
  bool _internal_has_path_planning() const;
  public:
  void clear_path_planning();
  const ::PathPlanningPackage& path_planning() const;
  ::PathPlanningPackage* release_path_planning();
  ::PathPlanningPackage* mutable_path_planning();
  void set_allocated_path_planning(::PathPlanningPackage* path_planning);
  private:
  const ::PathPlanningPackage& _internal_path_planning() const;
  ::PathPlanningPackage* _internal_mutable_path_planning();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float orientation = 4;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  float orientation() const;
  void set_orientation(float value);
  private:
  float _internal_orientation() const;
  void _internal_set_orientation(float value);
  public:

  // optional float target_x = 8;
  bool has_target_x() const;
  private:
  bool _internal_has_target_x() const;
  public:
  void clear_target_x();
  float target_x() const;
  void set_target_x(float value);
  private:
  float _internal_target_x() const;
  void _internal_set_target_x(float value);
  public:

  // optional float target_y = 9;
  bool has_target_y() const;
  private:
  bool _internal_has_target_y() const;
  public:
  void clear_target_y();
  float target_y() const;
  void set_target_y(float value);
  private:
  float _internal_target_y() const;
  void _internal_set_target_y(float value);
  public:

  // optional float velocity_x = 11;
  bool has_velocity_x() const;
  private:
  bool _internal_has_velocity_x() const;
  public:
  void clear_velocity_x();
  float velocity_x() const;
  void set_velocity_x(float value);
  private:
  float _internal_velocity_x() const;
  void _internal_set_velocity_x(float value);
  public:

  // optional float velocity_y = 12;
  bool has_velocity_y() const;
  private:
  bool _internal_has_velocity_y() const;
  public:
  void clear_velocity_y();
  float velocity_y() const;
  void set_velocity_y(float value);
  private:
  float _internal_velocity_y() const;
  void _internal_set_velocity_y(float value);
  public:

  // optional float velocity_theta = 13;
  bool has_velocity_theta() const;
  private:
  bool _internal_has_velocity_theta() const;
  public:
  void clear_velocity_theta();
  float velocity_theta() const;
  void set_velocity_theta(float value);
  private:
  float _internal_velocity_theta() const;
  void _internal_set_velocity_theta(float value);
  public:

  // optional float low_kick = 14;
  bool has_low_kick() const;
  private:
  bool _internal_has_low_kick() const;
  public:
  void clear_low_kick();
  float low_kick() const;
  void set_low_kick(float value);
  private:
  float _internal_low_kick() const;
  void _internal_set_low_kick(float value);
  public:

  // optional float high_kick = 15;
  bool has_high_kick() const;
  private:
  bool _internal_has_high_kick() const;
  public:
  void clear_high_kick();
  float high_kick() const;
  void set_high_kick(float value);
  private:
  float _internal_high_kick() const;
  void _internal_set_high_kick(float value);
  public:

  // optional float dribbler = 16;
  bool has_dribbler() const;
  private:
  bool _internal_has_dribbler() const;
  public:
  void clear_dribbler();
  float dribbler() const;
  void set_dribbler(float value);
  private:
  float _internal_dribbler() const;
  void _internal_set_dribbler(float value);
  public:

  // @@protoc_insertion_point(class_scope:AIRobotPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sensorialinformation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tactic_;
  ::PathPlanningPackage* path_planning_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float x_;
  float y_;
  float orientation_;
  float target_x_;
  float target_y_;
  float velocity_x_;
  float velocity_y_;
  float velocity_theta_;
  float low_kick_;
  float high_kick_;
  float dribbler_;
  friend struct ::TableStruct_messages_5fai_5fdata_5fmanager_2eproto;
};
// -------------------------------------------------------------------

class AIDataManagerPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AIDataManagerPackage) */ {
 public:
  AIDataManagerPackage();
  virtual ~AIDataManagerPackage();

  AIDataManagerPackage(const AIDataManagerPackage& from);
  AIDataManagerPackage(AIDataManagerPackage&& from) noexcept
    : AIDataManagerPackage() {
    *this = ::std::move(from);
  }

  inline AIDataManagerPackage& operator=(const AIDataManagerPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIDataManagerPackage& operator=(AIDataManagerPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIDataManagerPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIDataManagerPackage* internal_default_instance() {
    return reinterpret_cast<const AIDataManagerPackage*>(
               &_AIDataManagerPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AIDataManagerPackage& a, AIDataManagerPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(AIDataManagerPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIDataManagerPackage* New() const final {
    return CreateMaybeMessage<AIDataManagerPackage>(nullptr);
  }

  AIDataManagerPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIDataManagerPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIDataManagerPackage& from);
  void MergeFrom(const AIDataManagerPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIDataManagerPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AIDataManagerPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fai_5fdata_5fmanager_2eproto);
    return ::descriptor_table_messages_5fai_5fdata_5fmanager_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldFactsFieldNumber = 2,
    kTeamFieldNumber = 3,
    kPlayFieldNumber = 1,
  };
  // repeated string world_facts = 2;
  int world_facts_size() const;
  private:
  int _internal_world_facts_size() const;
  public:
  void clear_world_facts();
  const std::string& world_facts(int index) const;
  std::string* mutable_world_facts(int index);
  void set_world_facts(int index, const std::string& value);
  void set_world_facts(int index, std::string&& value);
  void set_world_facts(int index, const char* value);
  void set_world_facts(int index, const char* value, size_t size);
  std::string* add_world_facts();
  void add_world_facts(const std::string& value);
  void add_world_facts(std::string&& value);
  void add_world_facts(const char* value);
  void add_world_facts(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& world_facts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_world_facts();
  private:
  const std::string& _internal_world_facts(int index) const;
  std::string* _internal_add_world_facts();
  public:

  // repeated .AIRobotPackage team = 3;
  int team_size() const;
  private:
  int _internal_team_size() const;
  public:
  void clear_team();
  ::AIRobotPackage* mutable_team(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AIRobotPackage >*
      mutable_team();
  private:
  const ::AIRobotPackage& _internal_team(int index) const;
  ::AIRobotPackage* _internal_add_team();
  public:
  const ::AIRobotPackage& team(int index) const;
  ::AIRobotPackage* add_team();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AIRobotPackage >&
      team() const;

  // optional string play = 1;
  bool has_play() const;
  private:
  bool _internal_has_play() const;
  public:
  void clear_play();
  const std::string& play() const;
  void set_play(const std::string& value);
  void set_play(std::string&& value);
  void set_play(const char* value);
  void set_play(const char* value, size_t size);
  std::string* mutable_play();
  std::string* release_play();
  void set_allocated_play(std::string* play);
  private:
  const std::string& _internal_play() const;
  void _internal_set_play(const std::string& value);
  std::string* _internal_mutable_play();
  public:

  // @@protoc_insertion_point(class_scope:AIDataManagerPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> world_facts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AIRobotPackage > team_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr play_;
  friend struct ::TableStruct_messages_5fai_5fdata_5fmanager_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathPlanningPackage

// repeated float x = 1;
inline int PathPlanningPackage::_internal_x_size() const {
  return x_.size();
}
inline int PathPlanningPackage::x_size() const {
  return _internal_x_size();
}
inline void PathPlanningPackage::clear_x() {
  x_.Clear();
}
inline float PathPlanningPackage::_internal_x(int index) const {
  return x_.Get(index);
}
inline float PathPlanningPackage::x(int index) const {
  // @@protoc_insertion_point(field_get:PathPlanningPackage.x)
  return _internal_x(index);
}
inline void PathPlanningPackage::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:PathPlanningPackage.x)
}
inline void PathPlanningPackage::_internal_add_x(float value) {
  x_.Add(value);
}
inline void PathPlanningPackage::add_x(float value) {
  _internal_add_x(value);
  // @@protoc_insertion_point(field_add:PathPlanningPackage.x)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PathPlanningPackage::_internal_x() const {
  return x_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PathPlanningPackage::x() const {
  // @@protoc_insertion_point(field_list:PathPlanningPackage.x)
  return _internal_x();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PathPlanningPackage::_internal_mutable_x() {
  return &x_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PathPlanningPackage::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:PathPlanningPackage.x)
  return _internal_mutable_x();
}

// repeated float y = 2;
inline int PathPlanningPackage::_internal_y_size() const {
  return y_.size();
}
inline int PathPlanningPackage::y_size() const {
  return _internal_y_size();
}
inline void PathPlanningPackage::clear_y() {
  y_.Clear();
}
inline float PathPlanningPackage::_internal_y(int index) const {
  return y_.Get(index);
}
inline float PathPlanningPackage::y(int index) const {
  // @@protoc_insertion_point(field_get:PathPlanningPackage.y)
  return _internal_y(index);
}
inline void PathPlanningPackage::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:PathPlanningPackage.y)
}
inline void PathPlanningPackage::_internal_add_y(float value) {
  y_.Add(value);
}
inline void PathPlanningPackage::add_y(float value) {
  _internal_add_y(value);
  // @@protoc_insertion_point(field_add:PathPlanningPackage.y)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PathPlanningPackage::_internal_y() const {
  return y_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
PathPlanningPackage::y() const {
  // @@protoc_insertion_point(field_list:PathPlanningPackage.y)
  return _internal_y();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PathPlanningPackage::_internal_mutable_y() {
  return &y_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
PathPlanningPackage::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:PathPlanningPackage.y)
  return _internal_mutable_y();
}

// -------------------------------------------------------------------

// AIRobotPackage

// optional uint32 id = 1;
inline bool AIRobotPackage::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AIRobotPackage::has_id() const {
  return _internal_has_id();
}
inline void AIRobotPackage::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AIRobotPackage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AIRobotPackage::id() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.id)
  return _internal_id();
}
inline void AIRobotPackage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void AIRobotPackage::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.id)
}

// optional float x = 2;
inline bool AIRobotPackage::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AIRobotPackage::has_x() const {
  return _internal_has_x();
}
inline void AIRobotPackage::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float AIRobotPackage::_internal_x() const {
  return x_;
}
inline float AIRobotPackage::x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.x)
  return _internal_x();
}
inline void AIRobotPackage::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000010u;
  x_ = value;
}
inline void AIRobotPackage::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.x)
}

// optional float y = 3;
inline bool AIRobotPackage::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AIRobotPackage::has_y() const {
  return _internal_has_y();
}
inline void AIRobotPackage::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float AIRobotPackage::_internal_y() const {
  return y_;
}
inline float AIRobotPackage::y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.y)
  return _internal_y();
}
inline void AIRobotPackage::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000020u;
  y_ = value;
}
inline void AIRobotPackage::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.y)
}

// optional float orientation = 4;
inline bool AIRobotPackage::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AIRobotPackage::has_orientation() const {
  return _internal_has_orientation();
}
inline void AIRobotPackage::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float AIRobotPackage::_internal_orientation() const {
  return orientation_;
}
inline float AIRobotPackage::orientation() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.orientation)
  return _internal_orientation();
}
inline void AIRobotPackage::_internal_set_orientation(float value) {
  _has_bits_[0] |= 0x00000040u;
  orientation_ = value;
}
inline void AIRobotPackage::set_orientation(float value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.orientation)
}

// optional string skill = 5;
inline bool AIRobotPackage::_internal_has_skill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIRobotPackage::has_skill() const {
  return _internal_has_skill();
}
inline void AIRobotPackage::clear_skill() {
  skill_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AIRobotPackage::skill() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.skill)
  return _internal_skill();
}
inline void AIRobotPackage::set_skill(const std::string& value) {
  _internal_set_skill(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.skill)
}
inline std::string* AIRobotPackage::mutable_skill() {
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.skill)
  return _internal_mutable_skill();
}
inline const std::string& AIRobotPackage::_internal_skill() const {
  return skill_.GetNoArena();
}
inline void AIRobotPackage::_internal_set_skill(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AIRobotPackage::set_skill(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  skill_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AIRobotPackage.skill)
}
inline void AIRobotPackage::set_skill(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.skill)
}
inline void AIRobotPackage::set_skill(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  skill_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.skill)
}
inline std::string* AIRobotPackage::_internal_mutable_skill() {
  _has_bits_[0] |= 0x00000001u;
  return skill_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AIRobotPackage::release_skill() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.skill)
  if (!has_skill()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return skill_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AIRobotPackage::set_allocated_skill(std::string* skill) {
  if (skill != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  skill_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill);
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.skill)
}

// optional string tactic = 6;
inline bool AIRobotPackage::_internal_has_tactic() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AIRobotPackage::has_tactic() const {
  return _internal_has_tactic();
}
inline void AIRobotPackage::clear_tactic() {
  tactic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AIRobotPackage::tactic() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.tactic)
  return _internal_tactic();
}
inline void AIRobotPackage::set_tactic(const std::string& value) {
  _internal_set_tactic(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.tactic)
}
inline std::string* AIRobotPackage::mutable_tactic() {
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.tactic)
  return _internal_mutable_tactic();
}
inline const std::string& AIRobotPackage::_internal_tactic() const {
  return tactic_.GetNoArena();
}
inline void AIRobotPackage::_internal_set_tactic(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  tactic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AIRobotPackage::set_tactic(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  tactic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AIRobotPackage.tactic)
}
inline void AIRobotPackage::set_tactic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  tactic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.tactic)
}
inline void AIRobotPackage::set_tactic(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  tactic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.tactic)
}
inline std::string* AIRobotPackage::_internal_mutable_tactic() {
  _has_bits_[0] |= 0x00000002u;
  return tactic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AIRobotPackage::release_tactic() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.tactic)
  if (!has_tactic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return tactic_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AIRobotPackage::set_allocated_tactic(std::string* tactic) {
  if (tactic != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  tactic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tactic);
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.tactic)
}

// repeated string sensorialInformation = 7;
inline int AIRobotPackage::_internal_sensorialinformation_size() const {
  return sensorialinformation_.size();
}
inline int AIRobotPackage::sensorialinformation_size() const {
  return _internal_sensorialinformation_size();
}
inline void AIRobotPackage::clear_sensorialinformation() {
  sensorialinformation_.Clear();
}
inline std::string* AIRobotPackage::add_sensorialinformation() {
  // @@protoc_insertion_point(field_add_mutable:AIRobotPackage.sensorialInformation)
  return _internal_add_sensorialinformation();
}
inline const std::string& AIRobotPackage::_internal_sensorialinformation(int index) const {
  return sensorialinformation_.Get(index);
}
inline const std::string& AIRobotPackage::sensorialinformation(int index) const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.sensorialInformation)
  return _internal_sensorialinformation(index);
}
inline std::string* AIRobotPackage::mutable_sensorialinformation(int index) {
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.sensorialInformation)
  return sensorialinformation_.Mutable(index);
}
inline void AIRobotPackage::set_sensorialinformation(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AIRobotPackage.sensorialInformation)
  sensorialinformation_.Mutable(index)->assign(value);
}
inline void AIRobotPackage::set_sensorialinformation(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AIRobotPackage.sensorialInformation)
  sensorialinformation_.Mutable(index)->assign(std::move(value));
}
inline void AIRobotPackage::set_sensorialinformation(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sensorialinformation_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::set_sensorialinformation(int index, const char* value, size_t size) {
  sensorialinformation_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIRobotPackage.sensorialInformation)
}
inline std::string* AIRobotPackage::_internal_add_sensorialinformation() {
  return sensorialinformation_.Add();
}
inline void AIRobotPackage::add_sensorialinformation(const std::string& value) {
  sensorialinformation_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::add_sensorialinformation(std::string&& value) {
  sensorialinformation_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::add_sensorialinformation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sensorialinformation_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIRobotPackage.sensorialInformation)
}
inline void AIRobotPackage::add_sensorialinformation(const char* value, size_t size) {
  sensorialinformation_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIRobotPackage.sensorialInformation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AIRobotPackage::sensorialinformation() const {
  // @@protoc_insertion_point(field_list:AIRobotPackage.sensorialInformation)
  return sensorialinformation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AIRobotPackage::mutable_sensorialinformation() {
  // @@protoc_insertion_point(field_mutable_list:AIRobotPackage.sensorialInformation)
  return &sensorialinformation_;
}

// optional float target_x = 8;
inline bool AIRobotPackage::_internal_has_target_x() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AIRobotPackage::has_target_x() const {
  return _internal_has_target_x();
}
inline void AIRobotPackage::clear_target_x() {
  target_x_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float AIRobotPackage::_internal_target_x() const {
  return target_x_;
}
inline float AIRobotPackage::target_x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.target_x)
  return _internal_target_x();
}
inline void AIRobotPackage::_internal_set_target_x(float value) {
  _has_bits_[0] |= 0x00000080u;
  target_x_ = value;
}
inline void AIRobotPackage::set_target_x(float value) {
  _internal_set_target_x(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.target_x)
}

// optional float target_y = 9;
inline bool AIRobotPackage::_internal_has_target_y() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AIRobotPackage::has_target_y() const {
  return _internal_has_target_y();
}
inline void AIRobotPackage::clear_target_y() {
  target_y_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float AIRobotPackage::_internal_target_y() const {
  return target_y_;
}
inline float AIRobotPackage::target_y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.target_y)
  return _internal_target_y();
}
inline void AIRobotPackage::_internal_set_target_y(float value) {
  _has_bits_[0] |= 0x00000100u;
  target_y_ = value;
}
inline void AIRobotPackage::set_target_y(float value) {
  _internal_set_target_y(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.target_y)
}

// optional .PathPlanningPackage path_planning = 10;
inline bool AIRobotPackage::_internal_has_path_planning() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || path_planning_ != nullptr);
  return value;
}
inline bool AIRobotPackage::has_path_planning() const {
  return _internal_has_path_planning();
}
inline void AIRobotPackage::clear_path_planning() {
  if (path_planning_ != nullptr) path_planning_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::PathPlanningPackage& AIRobotPackage::_internal_path_planning() const {
  const ::PathPlanningPackage* p = path_planning_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PathPlanningPackage*>(
      &::_PathPlanningPackage_default_instance_);
}
inline const ::PathPlanningPackage& AIRobotPackage::path_planning() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.path_planning)
  return _internal_path_planning();
}
inline ::PathPlanningPackage* AIRobotPackage::release_path_planning() {
  // @@protoc_insertion_point(field_release:AIRobotPackage.path_planning)
  _has_bits_[0] &= ~0x00000004u;
  ::PathPlanningPackage* temp = path_planning_;
  path_planning_ = nullptr;
  return temp;
}
inline ::PathPlanningPackage* AIRobotPackage::_internal_mutable_path_planning() {
  _has_bits_[0] |= 0x00000004u;
  if (path_planning_ == nullptr) {
    auto* p = CreateMaybeMessage<::PathPlanningPackage>(GetArenaNoVirtual());
    path_planning_ = p;
  }
  return path_planning_;
}
inline ::PathPlanningPackage* AIRobotPackage::mutable_path_planning() {
  // @@protoc_insertion_point(field_mutable:AIRobotPackage.path_planning)
  return _internal_mutable_path_planning();
}
inline void AIRobotPackage::set_allocated_path_planning(::PathPlanningPackage* path_planning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete path_planning_;
  }
  if (path_planning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path_planning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_planning, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  path_planning_ = path_planning;
  // @@protoc_insertion_point(field_set_allocated:AIRobotPackage.path_planning)
}

// optional float velocity_x = 11;
inline bool AIRobotPackage::_internal_has_velocity_x() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AIRobotPackage::has_velocity_x() const {
  return _internal_has_velocity_x();
}
inline void AIRobotPackage::clear_velocity_x() {
  velocity_x_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float AIRobotPackage::_internal_velocity_x() const {
  return velocity_x_;
}
inline float AIRobotPackage::velocity_x() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_x)
  return _internal_velocity_x();
}
inline void AIRobotPackage::_internal_set_velocity_x(float value) {
  _has_bits_[0] |= 0x00000200u;
  velocity_x_ = value;
}
inline void AIRobotPackage::set_velocity_x(float value) {
  _internal_set_velocity_x(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_x)
}

// optional float velocity_y = 12;
inline bool AIRobotPackage::_internal_has_velocity_y() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AIRobotPackage::has_velocity_y() const {
  return _internal_has_velocity_y();
}
inline void AIRobotPackage::clear_velocity_y() {
  velocity_y_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float AIRobotPackage::_internal_velocity_y() const {
  return velocity_y_;
}
inline float AIRobotPackage::velocity_y() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_y)
  return _internal_velocity_y();
}
inline void AIRobotPackage::_internal_set_velocity_y(float value) {
  _has_bits_[0] |= 0x00000400u;
  velocity_y_ = value;
}
inline void AIRobotPackage::set_velocity_y(float value) {
  _internal_set_velocity_y(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_y)
}

// optional float velocity_theta = 13;
inline bool AIRobotPackage::_internal_has_velocity_theta() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AIRobotPackage::has_velocity_theta() const {
  return _internal_has_velocity_theta();
}
inline void AIRobotPackage::clear_velocity_theta() {
  velocity_theta_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float AIRobotPackage::_internal_velocity_theta() const {
  return velocity_theta_;
}
inline float AIRobotPackage::velocity_theta() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.velocity_theta)
  return _internal_velocity_theta();
}
inline void AIRobotPackage::_internal_set_velocity_theta(float value) {
  _has_bits_[0] |= 0x00000800u;
  velocity_theta_ = value;
}
inline void AIRobotPackage::set_velocity_theta(float value) {
  _internal_set_velocity_theta(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.velocity_theta)
}

// optional float low_kick = 14;
inline bool AIRobotPackage::_internal_has_low_kick() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AIRobotPackage::has_low_kick() const {
  return _internal_has_low_kick();
}
inline void AIRobotPackage::clear_low_kick() {
  low_kick_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float AIRobotPackage::_internal_low_kick() const {
  return low_kick_;
}
inline float AIRobotPackage::low_kick() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.low_kick)
  return _internal_low_kick();
}
inline void AIRobotPackage::_internal_set_low_kick(float value) {
  _has_bits_[0] |= 0x00001000u;
  low_kick_ = value;
}
inline void AIRobotPackage::set_low_kick(float value) {
  _internal_set_low_kick(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.low_kick)
}

// optional float high_kick = 15;
inline bool AIRobotPackage::_internal_has_high_kick() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AIRobotPackage::has_high_kick() const {
  return _internal_has_high_kick();
}
inline void AIRobotPackage::clear_high_kick() {
  high_kick_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float AIRobotPackage::_internal_high_kick() const {
  return high_kick_;
}
inline float AIRobotPackage::high_kick() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.high_kick)
  return _internal_high_kick();
}
inline void AIRobotPackage::_internal_set_high_kick(float value) {
  _has_bits_[0] |= 0x00002000u;
  high_kick_ = value;
}
inline void AIRobotPackage::set_high_kick(float value) {
  _internal_set_high_kick(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.high_kick)
}

// optional float dribbler = 16;
inline bool AIRobotPackage::_internal_has_dribbler() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool AIRobotPackage::has_dribbler() const {
  return _internal_has_dribbler();
}
inline void AIRobotPackage::clear_dribbler() {
  dribbler_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float AIRobotPackage::_internal_dribbler() const {
  return dribbler_;
}
inline float AIRobotPackage::dribbler() const {
  // @@protoc_insertion_point(field_get:AIRobotPackage.dribbler)
  return _internal_dribbler();
}
inline void AIRobotPackage::_internal_set_dribbler(float value) {
  _has_bits_[0] |= 0x00004000u;
  dribbler_ = value;
}
inline void AIRobotPackage::set_dribbler(float value) {
  _internal_set_dribbler(value);
  // @@protoc_insertion_point(field_set:AIRobotPackage.dribbler)
}

// -------------------------------------------------------------------

// AIDataManagerPackage

// optional string play = 1;
inline bool AIDataManagerPackage::_internal_has_play() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIDataManagerPackage::has_play() const {
  return _internal_has_play();
}
inline void AIDataManagerPackage::clear_play() {
  play_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AIDataManagerPackage::play() const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.play)
  return _internal_play();
}
inline void AIDataManagerPackage::set_play(const std::string& value) {
  _internal_set_play(value);
  // @@protoc_insertion_point(field_set:AIDataManagerPackage.play)
}
inline std::string* AIDataManagerPackage::mutable_play() {
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.play)
  return _internal_mutable_play();
}
inline const std::string& AIDataManagerPackage::_internal_play() const {
  return play_.GetNoArena();
}
inline void AIDataManagerPackage::_internal_set_play(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  play_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AIDataManagerPackage::set_play(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  play_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AIDataManagerPackage.play)
}
inline void AIDataManagerPackage::set_play(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  play_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AIDataManagerPackage.play)
}
inline void AIDataManagerPackage::set_play(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  play_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AIDataManagerPackage.play)
}
inline std::string* AIDataManagerPackage::_internal_mutable_play() {
  _has_bits_[0] |= 0x00000001u;
  return play_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AIDataManagerPackage::release_play() {
  // @@protoc_insertion_point(field_release:AIDataManagerPackage.play)
  if (!has_play()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return play_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AIDataManagerPackage::set_allocated_play(std::string* play) {
  if (play != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  play_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), play);
  // @@protoc_insertion_point(field_set_allocated:AIDataManagerPackage.play)
}

// repeated string world_facts = 2;
inline int AIDataManagerPackage::_internal_world_facts_size() const {
  return world_facts_.size();
}
inline int AIDataManagerPackage::world_facts_size() const {
  return _internal_world_facts_size();
}
inline void AIDataManagerPackage::clear_world_facts() {
  world_facts_.Clear();
}
inline std::string* AIDataManagerPackage::add_world_facts() {
  // @@protoc_insertion_point(field_add_mutable:AIDataManagerPackage.world_facts)
  return _internal_add_world_facts();
}
inline const std::string& AIDataManagerPackage::_internal_world_facts(int index) const {
  return world_facts_.Get(index);
}
inline const std::string& AIDataManagerPackage::world_facts(int index) const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.world_facts)
  return _internal_world_facts(index);
}
inline std::string* AIDataManagerPackage::mutable_world_facts(int index) {
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.world_facts)
  return world_facts_.Mutable(index);
}
inline void AIDataManagerPackage::set_world_facts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:AIDataManagerPackage.world_facts)
  world_facts_.Mutable(index)->assign(value);
}
inline void AIDataManagerPackage::set_world_facts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:AIDataManagerPackage.world_facts)
  world_facts_.Mutable(index)->assign(std::move(value));
}
inline void AIDataManagerPackage::set_world_facts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  world_facts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::set_world_facts(int index, const char* value, size_t size) {
  world_facts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:AIDataManagerPackage.world_facts)
}
inline std::string* AIDataManagerPackage::_internal_add_world_facts() {
  return world_facts_.Add();
}
inline void AIDataManagerPackage::add_world_facts(const std::string& value) {
  world_facts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::add_world_facts(std::string&& value) {
  world_facts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::add_world_facts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  world_facts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:AIDataManagerPackage.world_facts)
}
inline void AIDataManagerPackage::add_world_facts(const char* value, size_t size) {
  world_facts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:AIDataManagerPackage.world_facts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AIDataManagerPackage::world_facts() const {
  // @@protoc_insertion_point(field_list:AIDataManagerPackage.world_facts)
  return world_facts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AIDataManagerPackage::mutable_world_facts() {
  // @@protoc_insertion_point(field_mutable_list:AIDataManagerPackage.world_facts)
  return &world_facts_;
}

// repeated .AIRobotPackage team = 3;
inline int AIDataManagerPackage::_internal_team_size() const {
  return team_.size();
}
inline int AIDataManagerPackage::team_size() const {
  return _internal_team_size();
}
inline void AIDataManagerPackage::clear_team() {
  team_.Clear();
}
inline ::AIRobotPackage* AIDataManagerPackage::mutable_team(int index) {
  // @@protoc_insertion_point(field_mutable:AIDataManagerPackage.team)
  return team_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AIRobotPackage >*
AIDataManagerPackage::mutable_team() {
  // @@protoc_insertion_point(field_mutable_list:AIDataManagerPackage.team)
  return &team_;
}
inline const ::AIRobotPackage& AIDataManagerPackage::_internal_team(int index) const {
  return team_.Get(index);
}
inline const ::AIRobotPackage& AIDataManagerPackage::team(int index) const {
  // @@protoc_insertion_point(field_get:AIDataManagerPackage.team)
  return _internal_team(index);
}
inline ::AIRobotPackage* AIDataManagerPackage::_internal_add_team() {
  return team_.Add();
}
inline ::AIRobotPackage* AIDataManagerPackage::add_team() {
  // @@protoc_insertion_point(field_add:AIDataManagerPackage.team)
  return _internal_add_team();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AIRobotPackage >&
AIDataManagerPackage::team() const {
  // @@protoc_insertion_point(field_list:AIDataManagerPackage.team)
  return team_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5fai_5fdata_5fmanager_2eproto
